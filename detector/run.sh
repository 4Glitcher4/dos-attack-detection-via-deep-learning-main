#!/bin/bash


SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

VENV_PREFIX="$SCRIPT_DIR/.venv"

if ! command -v tshark &> /dev/null; then
  echo "Ой. Мы не нашли tshark на вашем ПК."
  echo -e "\e[1mВам нужно установить tshark и несколько зависимостей\e[0m, чтобы запустить эту программу."
  echo "Чтобы сделать это, вы можете прописать следующую команду:"
  echo -e "$ \e[1msudo apt install ./deps/deb/*\e[0m"
fi

# Функция, которая активирует виртуальную среду conda.
activate_env() {
  # Используя хак с eval, активируем виртуальную среду, иначе
  # появится ошибка, ссылающаяся на то, что мы "не в терминале" -
  # т.е. не в интерактивном режиме.
  conda activate $VENV_PREFIX
  # Если всё ок, выводим сообщение об успешной активации виртуальной среды
  if [ $? -eq 0 ]; then
    echo -e "Виртуальная среда \e[1m'$VENV_PREFIX'\e[0m для conda активирована."
  else
    # Иначе выводим сообщение об ошибке и выходим из скрипта.
    echo -e "\e[91;1mНе удалось активировать виртуальную среду '$VENV_PREFIX' в conda. Выход...\e[0m"
    exit 1
  fi
}

# Функция, которая спрашивает пользователя, хочет ли он создать новую
# виртуальную среду conda. Если да, то создаёт её.
prompt_to_create_new_env() {
  # Если виртуальная среда 'python39' не существует:
  # Спрашиваем пользователя, хочет ли он создать новую виртуальную среду
  echo "Виртуальная среда '$VENV_PREFIX' для conda не найдена."
  # Записываем ответ пользователя в переменную 'response'
  echo "Создать новую виртуальную среду на основе Python 3.9?"
  echo "Вы можете выбрать (латинскими буквами):"
  echo "  y - создать новую виртуальную среду"
  echo "  n - использовать текущую виртуальную среду ($CONDA_DEFAULT_ENV)"
  echo "  a - отменить установку"
  read -r -p "Выберите значение [y/n/a]: " response
  # Если пользователь хочет создать новую виртуальную среду 'python39'
  if [[ "$response" =~ ^([yY])$ ]]; then
    # Создаем новую виртуальную среду 'python39' и активируем её
    conda create --prefix $VENV_PREFIX python=3.9 -y
    activate_env
    # Если пользователь хочет использовать текущую виртуальную среду
    elif [[ "$response" =~ ^([nN])$ ]]; then
    # Продолжаем установку в текущей виртуальной среде (используем
    # виртуальную среду 'base')
    :
    # Если пользователь хочет отменить установку
    elif [[ "$response" =~ ^([aA])$ ]]; then
    # Выводим сообщение об отмене установки и выходим из скрипта
    echo -e "\e[91;1mУстановка отменена. Выход...\e[0m"
    exit 1
  else
    # Если пользователь ввёл что-то другое, то
    # выводим сообщение об ошибке и выходим из скрипта
    echo -e "\e[91;1mНеверный ввод. Выход...\e[0m"
    exit 1
  fi
}

# Функция для установки зависимостей
install_requirements() {
  # Устанавливаем зависимости
  echo "Установка зависимостей..."
  conda install --file $SCRIPT_DIR/requirements.txt
  # Если всё ок, выводим сообщение об успешной установке зависимостей
  if [ $? -eq 0 ]; then
    echo -e "Зависимости успешно установлены."
  else
    # Иначе выводим сообщение об ошибке и выходим из скрипта.
    echo -e "\e[91;1mНе удалось установить зависимости. Выход...\e[0m"
    exit 1
  fi
}

# Проверяем, установлена ли conda. Если нет, выводим сообщение и выходим из
# программы. Если да, выводим сообщение и продолжаем.
if ! command -v conda &> /dev/null; then
  echo "Ой. Мы не нашли conda на вашем ПК."
  echo -e "Чтобы запустить эту программу, вам нужно установить \e[1mconda для Python 3.9.\e[0m"
  echo -e "Версии Python выше 3.9, к сожалению, \e[1mне поддерживаются LUCID.\e[0m"
  echo -e "Вы можете скачать установщик для Linux здесь: \e[94;1mhttps://repo.anaconda.com/miniconda/Miniconda3-py39_23.1.0-1-Linux-x86_64.sh\e[0m"
  echo "Выход..."
  exit 1
fi
echo -e "Мы нашли \e[1mconda\e[0m по пути '$(which conda)'."

# Хак для того, чтобы 'conda activate' работала в скрипте, не требуя
# обязательного запуска в терминале (в интерактивном режиме)
# См. https://stackoverflow.com/a/56155771
eval "$(conda shell.bash hook)"

# Проверяем, активирована ли виртуальная среда 'python39' в conda.
if [[ "$CONDA_DEFAULT_ENV" == "$VENV_PREFIX" ]]; then
  # Активируем виртуальную среду 'python39' и продолжаем.
  echo -e "Виртуальная среда \e[1m'$VENV_PREFIX'\e[0m в conda уже была активирована. Устанавливаем всё необходимое..."
else
  # Если виртуальная среда 'python39' не активирована:
  # Проверяем, существует ли виртуальная среда 'python39' в conda.
  if conda env list | grep -q $VENV_PREFIX; then
    # Активируем виртуальную среду 'python39' и продолжаем.
    activate_env
  else
    # Если виртуальная среда 'python39' не существует:
    # Спрашиваем пользователя, хочет ли он создать новую виртуальную среду
    # в папке '.env' в текущей директории.
    prompt_to_create_new_env
  fi
fi

# Пишем версии conda и Python в консоль.
echo "Версия conda: $(conda -V)"
echo "Версия Python: $(python --version)"
echo "Текущая виртуальная среда: $CONDA_DEFAULT_ENV"

# Проверяем, установлен ли pip. Если нет, устанавливаем его.
if command -v pip &> /dev/null; then
  echo "Мы нашли pip. Скачиваем все необходимое."
  pip install -r $SCRIPT_DIR/requirements.txt
else
  echo "Ой. На вашем ПК не установлен pip."
  echo "Устанавливаем pip..."
  conda install pip
  if $? -eq 0; then
    echo "pip установлен. Устанавливаем все необходимое."
    pip install -r $SCRIPT_DIR/requirements.txt
  else
    echo "Не удалось установить pip. Выход."
    exit 1
  fi
fi

# Уведомляем пользователя о том, что мы запускаем программу с правами
# суперпользователя.
# Если мы запускаем основной скрипт с помощью 'sudo', то мы сможем использовать
# 'iptables', чтобы банить IP-адреса.
echo -e "\e[93m⚠\tВнимание, мы запускаем программу \e[93;1mс правами суперпользователя.\e[0m"
echo -e "\e[93m⚠\tВ этом нет ничего страшного, но мы хотим, чтобы вы знали об этом.\e[0m"
echo -e "\e[94mℹ\tЧтобы выйти из программы, нажмите \e[1mCtrl+C.\e[0m"

# Запускаем основной скрипт с сохранением переменной окружения 'PATH',
# чтобы виртуальная среда 'python39' была доступна для основного скрипта.
sudo PATH="$PATH" $(which python) $SCRIPT_DIR/src/main.py
